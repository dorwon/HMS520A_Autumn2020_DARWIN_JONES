c(1:10)
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- c(1:100)
c[1]
a1[1]
is.double(a1[1])
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- c(1.0:100.0)
is.double(a1[1])
a1[1]
is.double(a1)
a1 <- c(1.0:100.0)
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- dbl(c(1:100))
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- double(c(1:100))
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- as.double(c(1:100))
is.double(a1)
is.double(a1[1])
tens(100)
ones(100)
x <- 1:100
is.double(x)
x <- c(1, 5, 4, 9, 0)
x <- c(1, 5, 4, 9, 0)
x <- c(1, 5, 4, 9, 0)
x <- c(1, 5, 4, 9, 0)
seq(1,10,1)
x <- seq(1,10,1)
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- seq(1,100,1)
# Create a double atomic vector with all elements to be 10 and length to be 100.
a2 <- seq(from = 10, to = 10, length.out = 100)
a2
# Create a double atomic vector with all elements to be 10 and length to be 100.
a2 <- seq(from = 10, length.out = 100)
# Create a double atomic vector with all elements to be 10 and length to be 100.
a2 <- seq(from = 10, to = 10, length.out = 100)
# Create a double atomic vector with elements c(1, 2, 3, 4, 5) repeat 10 times. E.g., c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...).
a3 <- rep(1:5,10)
# Create a double atomic vector with elements c(0, 0.01, 0.02, ..., 1).
a5 <- seq(0,1,0.01)
# Create a double atomic vector with elements c(1, 2, 3, 4, 5) each repeat 10 times. E.g., c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, ...).
a4 <- rep(1:5, each = 10)
dplyr::on
max(a5)
# What is the type of rivers? (Atomic vector or list?) If it is an atomic vector,
# what is the element type of the vector? (double, integer, logic, or string?)
rivers()
data()
data("rivers")
force(rivers)
dd <- data("rivers")
View(dd)
force(rivers)
?data(`stats-package`)
?data('rivers')
wack <- data('rivers')
rivers
View(data('rivers'))
View(data(rivers))
data("AirPassengers")
force(rivers)
force(AirPassengers)
View(AirPassengers)
summmary(rivers)
summary(rivers)
mean(rivers)
hist(rivers)
is.list(rivers)
# Create a double atomic vector with elements c(1, 2, 3, 4, 5) repeat 10 times. E.g., c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...).
dbl_a3 <- rep(1:5,10)
source('~/hms520jones/homeworks/homework2.R')
# Create a double atomic vector with elements c(1, 2, 3, 4, 5) repeat 10 times. E.g., c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...).
a3 <- rep(1:5,10)
typeof(a3)
source('~/hms520jones/homeworks/homework2.R')
typeof(a3)
typeof(rivers)
str(a3)
print("sadasd")
summary(rivers)
summ <- ssummary(rivers)
summ <- summary(rivers)
str(summ)
summ
ls(rivers)
ls(river)
length(rivers)
summ
str(summ)
# Create an atomic vector that contains the length, sum, mean, median, variance, standard deviation,
# minimum and maximum of log-transformed rivers. Make sure each element in the vector has a reasonable name.
river_logged <- log(rivers)
# Create an atomic vector that contains the length, sum, mean, median, variance, standard deviation,
# minimum and maximum of log-transformed rivers. Make sure each element in the vector has a reasonable name.
rivs_l <- log(rivers)
variance(rivers)
var(rivers)
sd(rivers)
summary <- c(n = length(rivs_l), sum = sum(rivs_l), mean = mean(rivs_l),
med = median(rivs_l), var = var(rivs_l), st_dev = sd(rivs_l).
min = min(rivs_l), max = max(rivs_l))
summary <- c(n = length(rivs_l), sum = sum(rivs_l), mean = mean(rivs_l),
med = median(rivs_l), var = var(rivs_l), st_dev = sd(rivs_l),
min = min(rivs_l), max = max(rivs_l))
View(summary)
str(summary)
summary$mean
summary[mean]
summary[2]
names(summary)
summary["mean"]
sort(rivers)
# Trim 10 largest and 10 smallest elements in rivers and create the same summary vector in 2.
trimmed <- sort(rivers)[11:length(rivers)-10]
legnth(rivers)
length(rivers)
# Trim 10 largest and 10 smallest elements in rivers and create the same summary vector in 2.
trimmed <- sort(rivers)[11:(length(rivers)-10)]
#Problem 3 In this problem, we try to create a list, modify, add, and delete the items in the list.
#Create a list u, with two items x = c(5, 6, 7, 8) and y = c("a", "b", "c", "d").
u = list(x = c(5,6,7,8), y = c("a", "b", "c", "d"))
u["y"]
#Modify y in u such that it has numerical values c(1, 2, 3, 4).
u["y"] <- c(1:4)
1:4
#Modify y in u such that it has numerical values c(1, 2, 3, 4).
u["y"] <- 1:4
u["y"]
#Problem 3 In this problem, we try to create a list, modify, add, and delete the items in the list.
#Create a list u, with two items x = c(5, 6, 7, 8) and y = c("a", "b", "c", "d").
u <- list(x = c(5,6,7,8), y = c("a", "b", "c", "d"))
u
u$y
#Modify y in u such that it has numerical values c(1, 2, 3, 4).
u$y <- 1:4
u
#Modify y in u such that it has numerical values c(1, 2, 3, 4).
u$y <- c(1:4)
#Add x2 = x^2 and log_x = log(x) into the list.
u$x2 <- x^2
#Add x2 = x^2 and log_x = log(x) into the list.
u$x2 <- u$x^2
u$log_x <- log(u$x)
str(rivers)
fac <- factor(c("A","B"))
fac
type(fac)
is.array(fac)
str(fac)
mean(1,2)
mean(1,3)
mean(1,4)
??mean
?mean
mean(1:8)
mean(u)
u
source('~/hms520jones/homeworks/homework2.R')
u
# Darwin Jones
# HMS 520
# Learning activity 2
# Problem 1
# Create a double atomic vector, with values c(1, 2, ..., 100)?
a1 <- seq(1,100,1)
# Create a double atomic vector with all elements to be 10 and length to be 100.
a2 <- seq(from = 10, to = 10, length.out = 100)
# Create a double atomic vector with elements c(1, 2, 3, 4, 5) repeat 10 times. E.g., c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...).
a3 <- rep(1:5,10)
print("change me to a doulbe")
# Create a double atomic vector with elements c(1, 2, 3, 4, 5) each repeat 10 times. E.g., c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, ...).
a4 <- rep(1:5, each = 10)
print("change me to a doulbe")
# Create a double atomic vector with elements c(0, 0.01, 0.02, ..., 1).
a5 <- seq(0,1,0.01)
# Problem 2
# What is the type of rivers? (Atomic vector or list?) If it is an atomic vector,
# what is the element type of the vector? (double, integer, logic, or string?)
print("rivers is a double atomic vector")
# Create an atomic vector that contains the length, sum, mean, median, variance, standard deviation,
# minimum and maximum of log-transformed rivers. Make sure each element in the vector has a reasonable name.
rivs_l <- log(rivers)
loged_summary <- c(n = length(rivs_l), sum = sum(rivs_l), mean = mean(rivs_l),
med = median(rivs_l), var = var(rivs_l), st_dev = sd(rivs_l),
min = min(rivs_l), max = max(rivs_l))
# Trim 10 largest and 10 smallest elements in rivers and create the same summary vector in 2.
trimmed <- sort(rivers)[11:(length(rivers)-10)]
trimmed_summary <- c(n = length(trimmed), sum = sum(trimmed), mean = mean(trimmed),
med = median(trimmed), var = var(trimmed), st_dev = sd(trimmed),
min = min(trimmed), max = max(trimmed))
#Problem 3 In this problem, we try to create a list, modify, add, and delete the items in the list.
#Create a list u, with two items x = c(5, 6, 7, 8) and y = c("a", "b", "c", "d").
u <- list(x = c(5,6,7,8), y = c("a", "b", "c", "d"))
#Modify y in u such that it has numerical values c(1, 2, 3, 4).
u$y <- c(1:4)
u
mean(u)
mean(x = c(mean(u$x), mean(u$y)))
u$x2 <- u$x^2
u$log_x <- log(u$x)
u
u$log_x <- NULL
u
A <- rbind(x,y,z)
x <- c(1, 2, 3)
y <- c(4, 5, 6)
z <- c(7, 8, 9)
A <- rbind(x,y,z)
View(A)
View(A)
#Combine x, y and z as column vectors into a matrix.
B <- cbind(x,y,z)
View(B)
#Create a vector a <- c(1, 2, ..., 12). "Reshape" this vector into a 4 by 3 matrix in the column order,
a <- c(1:2)
#Create a vector a <- c(1, 2, ..., 12). "Reshape" this vector into a 4 by 3 matrix in the column order,
a <- c(1:12)
dim(A)
c(3,3)
?matrix
MatA <- matrix(a, nrow = 4, byrow = FALSE)
View(MatA)
MatB <- matrix(a, nrow = 4)
View(MatB)
View(MatA)
MatB <- matrix(a, nrow = 4, byrow = TRUE)
View(MatB)
source('~/hms520jones/homeworks/homework2.R')
10:1
c(10:1)
A <- matrix(c(1:12), nrow = 3)
B <- matrix(c(1:16), nrow = 4)
C <- matrix(c(16:1), nrow = 4)
#What does B*C do? Try to explain the arithmetic.
BC <- B*C
A <- matrix(c(1:12), nrow = 3)
B <- matrix(c(1:16), nrow = 4)
C <- matrix(c(16:1), nrow = 4)
#What does B*C do? Try to explain the arithmetic.
BC <- B*C
View(u)
View(BC)
View(B)
View(C)
AB <- A %*% B
View(A)
View(AB)
diag(A)
A
B
sum(diag(B))
A <- matrix(c(1:12), nrow = 3)
B <- matrix(c(1:16), nrow = 4)
C <- matrix(c(16:1), nrow = 4)
#What does B*C do? Try to explain the arithmetic.
BC <- B*C
View(BC)
View(C)
View(B)
View(C)
AB <- A %*% B
View(AB)
View(A)
View(B)
