# If n = 0:1, return predecided A_0 A_1
if(n < 2) {
return(starting_values[1:(n+1)])
}
# calculate fibbonacci using while loop
fib <- starting_values
while(n > 1) {
fib <- c(fib, sum(tail(fib, n = 2)))
n = n - 1
}
return(fib)
}
fib(0)
fib <- function(n, starting_values = c(0,1)) {
# check for an integer > 0
if(!is.integer(n) | n < 0) {
return("n must be an integer")
}
# If n = 0:1, return predecided A_0 A_1
if(n < 2) {
return(starting_values[1:(n+1)])
}
# calculate fibbonacci using while loop
fib <- starting_values
while(n > 1) {
fib <- c(fib, sum(tail(fib, n = 2)))
n = n - 1
}
return(fib)
}
fib(0)
fib(-1)
fib(1)
is.integer(n)
!is.integer(n)
fib <- function(n, starting_values = c(0,1)) {
# check for an integer > 0
if(!is.integer(n) | n < 0) {
return("error: n must be an integer")
}
# If n = 0:1, return predecided A_0 A_1
if(n < 2) {
return(starting_values[1:(n+1)])
}
# calculate fibbonacci using while loop
fib <- starting_values
while(n > 1) {
fib <- c(fib, sum(tail(fib, n = 2)))
n = n - 1
}
return(fib)
}
fib(1)
fib(1)
debugSource('~/hms520jones/homeworks/homework3.R')
fib(1)
debugSource('~/hms520jones/homeworks/homework3.R')
fib(1)
n=1
fib(n)
!is.integer(n)
is.integer(n)
typeof(n)
1
3
typeof(3)
typeof(1)
is.integer(c(1))
c(1)
c(1,2)
is.integer(1:1)
fib(1L)
fib(0L)
fib(2)
fib(2L)
fib(4L)
fib(6L)
fib(0L)
fib(1L, c(4,5))
fib(4L, c(4,5))
source('~/hms520jones/homeworks/homework3.R')
source('~/hms520jones/homeworks/homework3.R')
v <- c(2,"dd")
v <- c(2,"dd", 3:1)
v <- list(2,"dd", 3:1)
my_count(v)
?count()
x <- NULL
x[1] <- 2
x <- NULL
x[2] <- 2
g[2] <- 2
is.integer(NULL)
NULL + 1
NULL + 3
is.integer(rep(1,3))
seq(0,0)
p <- seq(0,0)
p <- seq(0,1)
p <- seq(0,0, length.out = 22)
is.integer(p)
?rep
count <- function(vec, x) {
# throw error if vec is not atomic
if(!is.atomic(vec)) {
stop("vec must be an atomic vector")
}
# See the number of times each value in x is in vec and return that vector
counts <- rep(0L, times = length(x))
for(i in x) {
for(j in vec) {
if(vec[j] == x[i]) {
counts[i] = counts
}
}
}
}
source('~/hms520jones/homeworks/homework3.R')
randint
rand
randu
x <- 1:10
as.int(10) == 1.000
as.integer(10) == 1.000
as.integer(10) == 10.000
sample(1:20)
sample(1:20, 100)
sample(1:20, size = 100)
sample(1:20, size = 100, replace = FALSE)
sample(1:20, size = 100, replace = TRUE)
pop <- sample(1:20, size = 100, replace = TRUE)
vals <- 1:20
count(pop,vals)
pop <- sample(1:20)
count(pop,vals)
table(pop)
pop <- sample(1:20, size = 100, replace = TRUE)
table(pop)
count(pop,vals)
debugSource('~/hms520jones/homeworks/homework3.R')
count(pop,vals)
source('~/hms520jones/homeworks/homework3.R')
contains(d)
contains(x)
isin(d)
isin()
vals[vals == 2]
pop
sum(pop[pop == 2])
source('~/hms520jones/homeworks/homework3.R')
table(pop)
count(pop, x)
x
count(pop, y)
count(pop, vals)
table(pop)
debugSource('~/hms520jones/homeworks/homework3.R')
count(pop, vals)
debugSource('~/hms520jones/homeworks/homework3.R')
count(pop, vals)
debugSource('~/hms520jones/homeworks/homework3.R')
source('~/hms520jones/homeworks/homework3.R')
count(pop, vals)
table(pop)
unique()
unique(x)
unique(pop)
count(pop, vals)
source('~/hms520jones/homeworks/homework3.R')
my_unique(pop)
my_unique(pop, return_counts = T)
source('~/hms520jones/homeworks/homework3.R')
my_unique(pop)
my_unique(pop, return_counts = T)
table(pop)
?unique
debugSource('~/hms520jones/homeworks/homework3.R')
my_unique(pop, return_counts = T)
debugSource('~/hms520jones/homeworks/homework3.R')
my_unique(pop, return_counts = T)
x[x == 9L]
counts[x[x==9]]
counts[counts == x[x==9]]
length(pop[pop==1])
x[x == i]
x[x == 9]
unique(pop)
uni <- unique(pop)
uni
uni[uni == 9]
pop[pop == 9]
source('~/hms520jones/homeworks/homework3.R')
my_unique(pop, return_counts = T)
count(uni, vals)
source('~/hms520jones/homeworks/homework3.R')
count(uni, vals)
table(pop, vals)
table(pop)
source('~/hms520jones/homeworks/homework3.R')
count(uni, vals)
source('~/hms520jones/homeworks/homework3.R')
count(pop, vals)
source('~/hms520jones/homeworks/homework3.R')
count(pop, vals)
my_unique(pop, return_counts = T)
table(pop)
source('~/hms520jones/homeworks/homework3.R')
my_unique(pop, return_counts = T)
table(pop)
count(pop, uni)
aaa <- rnorm(100)
1/uni
sqrt(2)
2(3)
2*(3)
2 (3)
2
2 3
[3*3*(3+4)]
(3*3*(3+4))
7*3*3
source('~/hms520jones/homeworks/homework3.R')
baa <- sum(aaa)
baa
aaa
binomial_fun(baa, length(aaa))
aaa <- rnorm(100, mean = .5, sd = .5)
max(aaa)
aaa <- rbinom(100, 5, 0.4)
aaa
aaa <- rbinom(100, 1, 0.4)
aaa
aaa <- rbern(100, .5)
aaa <- rbinom(100, 1, 0.4)
baa <- sum(aaa)
binomial_fun(baa, 100)
summary(aaa)
sd(a)
sd(aaa)
aaa <- rbinom(100, 1, 0.4)
baa <- sum(aaa)
binomial_fun(baa, 100)
summary(aaa)
sd(aaa)
?sd
binomial_fun <- function(s, n) {
#calulate p^
p_hat <- (1 / n) * s
# calculate sqrt of v_hat, the standard deviation
v_hat <- (p_hat * (1 - p_hat)) / (n-1)
std_dev <- sqrt(v_hat)
return(c(mean = p_hat, standard_dev = std_dev))
}
binomial_fun(baa, 100)
binomial_fun(baa, rep(100,100))
aaa
debugSource('~/hms520jones/homeworks/homework3.R')
aaa <- rep(rbinom(1000, 1, 0.5), 100)
aaa
aaa <- rep(rbinom(100, 1, 0.5)
/
;
baa
rint(33)
sums <- rnorm(10, 55, 15)
sample_size <- sample(seq(10,100,10), size = 10, replace = T)
binomial_fun(sums, sample_size)
bbb <- rep(rbinom(100, 1, 0.7)
)
cbb <- sum(bbb)
binomial_fun(c(baa,cbb), c(100,00))
binomial_fun(c(baa,cbb), c(100,100))
source('~/hms520jones/homeworks/homework3.R')
binomial_fun(c(baa,cbb), c(100,100))
sd(bbb)
binomial_fun(c(baa,cbb), 100)
lm
x <- seq(0,100)
y <- x * 5
jitter(y)
y <- jitter(y)
ln
lm(x,y)
?lm
lm(y~x+b)
lm(y~x+b, data = list(x,y))
lm(y~x, data = list(x,y))
source('~/hms520jones/homeworks/homework3.R')
lin_fit(x,y)
coeff <- lin_fit(x,y)
coeff
View(coeff)
View(coeff$coefficients)
source('~/hms520jones/homeworks/homework3.R')
coeff <- lin_fit(x,y)
coeff
now make a poly fit function
y <- y+ 12
coeff <- lin_fit(x,y)
coeff
poly(x)
poly(x,i)
?poly
poly(x,degree = 2)
?lm
polynomial
formula()
formula(x)
?formula
c("ad", "ASDas")
dd <- c("ad", "ASDas")
paste0(dd)
as.formula(dd)
formula(paste(x, collapse = " "))
?poly
poly(1:10, 3)
ddd <- poly(1:10, 3)
ddd
View(ddd)
paste0("y ~ ", "x^1")
paste0("y ~ ", "x^", 2)
lin_fit <- function(x, y) {
lm(y~+x)$coefficients
}
lin_fit(x,y)
lm(y~0)
lm(y~1)
y
lm(y~1)
lm(y~2)
lm(y~1)
as.function("y ~ 1")
as.function("y ~ x")
as.function
?function
()
/
?as.function
?alist
lm(parse(text = "y~x"))
formula("y~ x1")
formula("y~ x^1")
source('~/hms520jones/homeworks/homework3.R')
x
y <- x^2 - 3x^3 + 6x +6
y <- x^2 - 3x^3 + 6x +6
y <- x^2
y <- (x^2 - 3x^3 + 6x +6)
y <- x^2 + 6
y <- x^2 + 6 + x
y <- x^2 + 6 + 5x
y <- x^2 + 6 + x
y <- x^2 + 6 + x
y <- x^2 + 6 + 4x
y <- x^2 + 6 + 4x
y <- x^2 + 6 + x
y
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x, y, degree = 2)
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x, y, degree = 2)
lm(y~x^2+x)
lm(y~x^2+x+1)
lm(formula("y~x^2+x+1"))
poly_fit(x, y, degree = 2)
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x, y, degree = 2)
lm("y~1+x^1+x^2")
lm(formula("y~1+x^1+x^2"))
lm(formula("y~1+x^1+ x^2"))
lm(formula("y ~ 1 + x^1 + x^2"))
lm(formula("y ~ 1 + x^1 + x^2"))
formula("y~x^2")
formula("y~x^2+x^1+1")
formula("y~1+x^2+x^1+1")
formula("y~1+x^1")
forme <- formula("y~1+x^1+x^2")
poly_fit(x, y, degree = 3)
poly_fit(x, y, degree = 2)
source('~/hms520jones/homeworks/homework3.R')
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x,y, degree = 3)
poly_fit(x,y, degree = 2)
poly_fit(x,y, degree = 1)
poly_fit(x,y, degree = 0)
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x,y, degree = 0)
poly_fit(x,y, degree = 2)
lm(y ~ 1 + x^1 + x^2)
source('~/hms520jones/homeworks/homework3.R')
lm(y ~ 1 + x^1 + x^2)
poly_fit(x,y, degree = 2)
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x,y, degree = 2)
lm(y ~ 1 + x + x^2)
lm(y ~ 1 + x + x^2 + x^3)
lm(y ~ 1 + x + x2 + x3)
poly(y ~ 1 + x + x2 + x3)
poly(y ~ 1 + x + x2 + x3)
source('~/hms520jones/homeworks/homework3.R')
lll <- lm(y ~ 1 + x + x^2)
ll
lll
poly(q,3)
poly(y,3)
poly(x,1)
poly(x,3)
poly(x,2)
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x,y,2)
source('~/hms520jones/homeworks/homework3.R')
poly_fit(x,y,2)
lm(y ~ poly(x, 2))
y
poly(x,3)
x
plot(x,y)
y <- 1 + 5*x + 2*x^2
lm(y ~ poly(x,2))
source('~/hms520jones/homeworks/homework3.R')
x = seq(1,50)
lm(y ~ 1 + x + x^2)
y = 4 + 5*x + 2*x^2
lm(y ~ 1 + x + x^2)
plot(x,y)
lm(y ~ poly(x,2))
lm(y ~ poly(x,2))$coefficients
lm(y~x)
model <- lm(y~poly(x, degree = 2))
summary(model)
y <- x^2
ls
model <- lm(y~poly(x, degree = 2))
model
model <- lm(y~poly(x, degree = 2, data = y))
mode
model
model$coefficients
source('~/hms520jones/homeworks/homework3.R')
poly_pred <- function(x, coef) {
mat <- poly(x, degree = length(coef) - 1)
mat <- cbind(1, mat)
mat %*% coef
}
:100:
1
poly_pred <- function(x, coef) {
mat <- poly(x, degree = length(coef) - 1)
mat <- cbind(1, mat)
mat %*% coef
}
View(BC)
x <- 1:50
y <- 5 + 4*x^2 - 6*x
coef <- poly_fit(x,y,2)
View(poly_pred)
poly_pred(x,coef = coef)
y_guess <- poly_pred(x,coef = coef)
View(y_guess)
plot(x,y)
lines(x,y_guess)
?cbind
names(coef) <- NULL
poly_pred(x,coef)
View(poly_pred)
poly_pred <-  function(x, coef) {
mat <- poly(x, degree = length(coef) - 1)
mat <- cbind(1, mat)
mat %*% coef
}
poly_pred <-  function(x, coef) {
mat <- poly(x, degree = length(coef) - 1)
print(mat)
mat <- cbind(1, mat)
print(mat)
mat %*% coef
}
poly_pred(x,coef)
source('~/hms520jones/homeworks/homework3.R')
poly_pred(x, coef)
source('~/hms520jones/homeworks/homework3.R')
poly_pred(x, coef)
poly_pred <- function(x, coef) {
print(coef)
poly(x, degree = (length(coef)-1), raw = TRUE)
}
poly_pred(x, coef)
eq <- poly_pred(x, coef)
cbind(1,eq)
eq <- cbind(1,eq)
coef %*% eq
eq %*% coef
poly_fit <- function(x, y, degree = 1) {
model <- lm(y ~ poly(x, degree, raw = TRUE))
coefficients(model)
}
# create a poly_pred with x and coeff as arguments
# and returns the dependent vectors
poly_pred <- function(x, coef) {
#create basis for polynomial
eq <- poly(x, degree = (length(coef)-1), raw = TRUE)
#add column for constant
eq <- cbind(1,eq)
#perform matrix multiplication on eq to recieve y values. return them
eq %*% coef
}
poly_fit(x,y,2)
coeff <- poly_fit(x,y,2)
y2 <- poly_pred(x,coeff)
View(y2)
plot(x,y)
lines(x,y2)
